;****************************************************************
;*								*
;*		Test4.x65					*
;*		Super NES Mouse Check program II		*
;*		March 11, 1992          			*
;*		(c) 1992 Nintendo of America Inc.		*
;*								*
;****************************************************************
;
mouse_test
	lda	g_seq
	jsr	rst28

;	dw	test
test


	ldx	#00
.10
	stz	check19,x
	inx
	cpx	#49
	bne	.10

	ldx	#$00		; Begin from mouse 1
test_st10
	lda	mouse_y0,x	; current speed indication for x & y
	and 	#%01111111
	sta	check1,x
	lda	mouse_x0,x
	and 	#%01111111
	sta	check5,x

;************* Judge maximum speed ***********
max_sp
	lda	mouse_y0,x	; save max. speed for Y in check3
	and	#%01111111
	sta	work0l
	cmp	check3,x
	bcc	.10
	lda	work0l
	sta	check3,x
.10
	lda	mouse_x0,x	; save max. speed for X in check7
	and	#%01111111
	sta	work0l
	cmp	check7,x
	bcc	.20
	lda	work0l
	sta	check7,x
.20
;********** Prepare key data indication ******
	lda	mouse_con0,x
	sta	check9,x
	lda	mouse_sp0,x
	sta	check11,x
	lda	mouse_sw0,x
	sta	check13,x


;********** Prepare direction indication **********

	lda	mouse_y0,x
	and	#%01111111
	bne	.30
				
	stz	check15,x	; mouse stopped
	bra	.100

.30
	lda	mouse_y0,x
	and	#%10000000
	beq	.40
	lda	#$02		; mouse moves up
	sta	check15,x
	bra	.100
.40				; mouse moves down
	lda	#$01
	sta	check15,x

.100
	lda	mouse_x0,x
	and	#%01111111
	bne	.130
				
	stz	check17,x	; mouse stopped
	bra	.150

.130
	lda	mouse_x0,x
	and	#%10000000
	beq	.140
	lda	#$02		; mouse moves left
	sta	check17,x
	bra	.150
.135
	jmp	test_st10
.140				; mouse moves right
	lda	#$01
	sta	check17,x

.150
	inx
	cpx	#$02
	bne	.135

;********** Prepare mouse data display *****
data				; number displayed bit by bit
	ldx	#$00
	ldy	#$01		; 4219h
	jsr	chenge1		; convert number
	ldy	#$00		; 4218h
	jsr	chenge1

	ldy	#$00		; mouse_y0
	jsr	chenge2
	ldy	#$02		; mouse_x0
	jsr	chenge2

	ldy	#$03		; 421bh
	jsr	chenge1
	ldy	#$02		; 421ah
	jsr	chenge1
	
	ldy	#$01		; mouse_y1
	jsr	chenge2
	ldy	#$03		; mouse_x1
	jsr	chenge2

				; Display "OK" routine
	ldx	#$00		; index for check19
	ldy	#$00		; Location of number
	jsr	hyouzi

	ldx	#16		;check34
	ldy	#20
	jsr	hyouzi

	ldx	#04		; index for check22 & check19
	ldy	#40		; location of number
	jsr	hyouzi

	ldx	#20		; check38
	ldy	#60
	jsr	hyouzi

	ldx	#08		; index for check26 & check19
	ldy	#80		; location of number
	jsr	hyouzi

	ldx	#24		; check42
	ldy	#100
	jsr	hyouzi

	ldx	#12		; index for check30 & check19
	ldy	#120		; location of number
	jsr	hyouzi

	ldx	#28		; check46
	ldy	#140
	jsr	hyouzi


	stz	box_no		; Box number
	lda	#<kekka
	sta	bg_box+1
	lda	#>kekka
	sta	bg_box+2
	lda	#$01		; display on
	sta	bg_box
	lda	#$ec		; display addr. low
	sta	bg_box+3
	lda	#$02		; display addr. high
	sta	bg_box+4
	lda	#$04		; vert. value
	sta	bg_box+5
	lda	#$14		; horz. value
	sta	bg_box+6

	ldx	#00		; index for check1 
	ldy	#00		; location of number
	jsr	hyouzi2

	lda	#$07
	sta	box_no2		; box number
	a16
	lda	#<kekka2
	sta	bg_box+8
	lda	#>kekka2
	sta	bg_box+9
	a8
	lda	#$01		; display on
	sta	bg_box+7
	lda	#$b1		; display addr. low
	sta	bg_box+10
	lda	#$00		; display addr. high
	sta	bg_box+11
	lda	#10		; vert. value
	sta	bg_box+12
	lda	#02		; horz. value
	sta	bg_box+13


	ldx	#01		; check3
	ldy	#48
	jsr	hyouzi2

	lda	#28
	sta	box_no5		; Box number
	a16
	lda	#<kekka2+48
	sta	bg_box+29
	lda	#>kekka2+48
	sta	bg_box+30
	a8
	lda	#$01		; display on
	sta	bg_box+28
	lda	#$bb		; display addr. low
	sta	bg_box+31
	lda	#$00		; display addr. high
	sta	bg_box+32
	lda	#10		; vert. value
	sta	bg_box+33
	lda	#02		; horz. value
	sta	bg_box+34



;	jsr	speed_hyouzi
;	jsr	key_hyouzi
;	jsr	direction_jyouge
;	jsr	direction_sayuu

	lda	#14
	sta	box_no3		; box number
	lda	#<kekka3
	sta	bg_box+15
	lda	#>kekka3
	sta	bg_box+16
	lda	#$01		; display on
	sta	bg_box+14
	lda	#$ee		; display addr. low
	sta	bg_box+17
	lda	#$01		; display addr. high
	sta	bg_box+18
	lda	#08		; vert. value
	sta	bg_box+19
	lda	#05		; horz. value
	sta	bg_box+20

	lda	#21
	sta	box_no4		; box number
	lda	#<kekka4
	sta	bg_box+22
	lda	#>kekka4
	sta	bg_box+23
	lda	#$01		; display on
	sta	bg_box+21
	lda	#$f8		; display addr. low
	sta	bg_box+24
	lda	#$01		; display addr. high
	sta	bg_box+25
	lda	#08		; vert. value
	sta	bg_box+26
	lda	#05		; horz. value
	sta	bg_box+27

	rts

	ifeq	1
speed_hyouzi
	ldx	#$00
	ldy	#$00
	lda	#$02
	sta	work0l
.10
	lda	mouse_con,x
	beq	.85

	lda	check11,x
	beq	.70
	cmp	#$01
	beq	.50
	cmp	#$02
	beq	.30

	ldx	#$00
.20
	lda	err,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.20
	bra	.90

.30
	ldx	#$00
.40
	lda	fast,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.40
	bra	.90

.50
	ldx	#$00
.60
	lda	midi,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.60
	bra	.90
.70
	ldx	#$00
.80
	lda	slow,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.80
	bra	.90
.85
	ldx	#$00
.87
	lda	non,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.87

.90
	ldx	#$01
	ldy	#81
	dec	work0l
	bne	.10

	rts


key_hyouzi
	ldx	#$00
	ldy	#20
	lda	#$02
	sta	work0l
.01
	lda	check13,x
	beq	.09
	cmp	#$01
	beq	.05
	cmp	#$02
	beq	.03

	ldx	#$00
.02
	lda	both,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.02
	bra	.20
.03
	ldx	#$00
.04
	lda	right,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.04
	bra	.20

.05
	ldx	#$00
.06
	lda	left,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.06
	bra	.20
.09
	ldx	#$00
.10
	lda	non,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.10
.20
	ldx	#$01
	ldy	#101
	dec	work0l
	bne	.01

	rts

direction_jyouge
	ldx	#$00
	ldy	#40
	lda	#$02
	sta	work0l
.01
	lda	check15,x
	beq	.09
	cmp	#$01
	beq	.05

	ldx	#$00
.03
	lda	up,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.03
	bra	.50

.05
	ldx	#$00
.06
	lda	down,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.06
	bra	.50
.09
	ldx	#$00
.10
	lda	stop,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.10

.50
	ldx	#$01
	ldy	#121
	dec	work0l
	bne	.01

	rts

direction_sayuu
	ldx	#$00
	ldy	#60
	lda	#$02
	sta	work0l
.01
	lda	check17,x
	beq	.09
	cmp	#$01
	beq	.05

	ldx	#$00
.03
	lda	left,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.03
	bra	.50

.05
	ldx	#$00
.06
	lda	right,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.06
	bra	.50
.09
	ldx	#$00
.10
	lda	stop,x
	sta	kekka3,y
	inx
	iny
	iny
	cpx	#10
	bne	.10

.50
	ldx	#$01
	ldy	#141
	dec	work0l
	bne	.01

	rts
	endc




;****** sub -routines ****************
hyouzi				; prepare to display BG number
	lda	#04
	sta	work0l
.10
	lda	check19,x	
	and	#%11110000
	lsr	a
	lsr	a
	lsr	a
	lsr	a
	clc
	adc	#$70
	sta	kekka,y
	lda	check19,x
	and	#%00001111

	clc
	adc	#$70
	sta	kekka+2,y
	tya
	clc
	adc	#$04
	tay
	inx
	dec	work0l		;
	bne	.10

	rts

hyouzi2
	lda	#05		;test#02
	sta	work0l
.10
	lda	check1,x	
	and	#%11110000
	lsr	a
	lsr	a
	lsr	a
	lsr	a
	clc
	adc	#$70
	sta	kekka2,y
	lda	check1,x
	and	#%00001111

	clc
	adc	#$70
	sta	kekka2+2,y
	tya
	clc
	adc	#08		;#20
	tay
	inx			;test
	inx
	dec	work0l		;
	bne	.10

	rts

chenge1				; data conversion
	lda	#$04
	sta	work0l
	lda	$4218,y		; shift left 1 bit (high bit to carry)
.10
	asl	a
	rol	check19,x	; transfer C to low bit of check19 + x
	asl	check19,x
	asl	check19,x
	asl	check19,x
	asl	a		; shift left 1 bit (high bit to carry)
	rol	check19,x	; transfer C to low bit of check19 + x
	inx

	dec	work0l
	bne	.10

	rts

chenge2				; data conversion
	lda	#$04
	sta	work0l
	lda	mouse_y0,y	; shift left 1 bit (high bit to carry)
.10
	asl	a
	rol	check19,x	; transfer C to low bit of check19 + x
	asl	check19,x
	asl	check19,x
	asl	check19,x
	asl	a		; shift left 1 bit (high bit to carry)
	rol	check19,x	; transfer C to low bit of check19 + x
	inx

	dec	work0l
	bne	.10

	rts
;******** character data ********

slow
	db	$8c,$85,$88,$90,$40
	db	$40,$40,$40,$40,$40
midi
	db	$86,$82,$7d,$82,$40
	db	$40,$40,$40,$40,$40
fast
	db	$7f,$7a,$8c,$8d,$40
	db	$40,$40,$40,$40,$40
stop
	db	$8c,$8d,$88,$89,$40
	db	$40,$40,$40,$40,$40
up
	db	$40,$8e,$40,$89,$40
	db	$40,$40,$40,$40,$40
down
	db	$7d,$88,$90,$87,$40
	db	$40,$40,$40,$40,$40
right
	db	$8b,$82,$80,$81,$8d
	db	$40,$40,$40,$40,$40
left
	db	$85,$7e,$7f,$8d,$40
	db	$40,$40,$40,$40,$40
both
	db	$7b,$88,$8d,$81,$40
	db	$40,$40,$40,$40,$40
non
	db	$40,$40,$40,$40,$40
	db	$40,$40,$40,$40,$40
err
	db	$7e,$8b,$8b,$40,$40
	db	$40,$40,$40,$40,$40





;*****************************************************************
;*                                                               *
;*           Draw entire BG screen                               *
;*                                                               *
;*****************************************************************
bg_write
	lda	#%00000001
	sta	$4310		; DMA parameter 
	lda	#$18
	sta	$4311		; B bus address  

	a16

	pla
	inc	a
	sta	reg0
	inc	a
	pha

	a8

	ldy	#00
	lda	(reg0),y
	sta	$4312		; A bus address LOW  
	iny
	lda	(reg0),y
	sta	$4313		; A bus address HIGH
	lda	#00		; 1/////////
	sta	$4314		; A bus bank   

	lda	#<$800		; 800 pieces
	sta	$4315		; Transfer byte number LOW
	lda	#>$800
	sta	$4316		; Transfer byte number HIGH

	lda	#<$0000     	; 800h bytes starting from $0000
	sta	$2116		; VRAM address LOW
	lda	#>$0000
	sta	$2117		; VRAM address HIGH
	lda	#%10000000
	sta	$2115		; VMAINC
	lda	#%00000010
	sta	$420b		; DMA transfer 

	rts

;******************************************************************
;* box_write      BG set routine                                  *
;*                                                                *
;*	This general routine can be use to display BG             *
;*	Save bg_box to bg_box7, character will appear             *
;*                                                                *
;*	bg_box : 1= display ON, 0= display OFF                    *
;*	bg_box1: Display address low (Data name)                  *
;*	bg_box2: Display address high (Data name)                 *
;*	bg_box3: Display location address low                     *
;*	bg_box4: Display location address high                    *
;*	bg_box5: Character vertical number                        *
;*	bg_box6: Character horizontal number                      *
;*	Must set these parameters before routine is called        *
;*								  *
;*      Call box_write during vblank.  If you want to display     *
;*      2 bg_box, then call box_write twice.                      *
;*                                                                *
;******************************************************************
box_write
	lda	bg_box,x	; Display on? 1:on  0:off
	cmp	#$01
	beq	.100
	rts
.100
;	ldy	#0
;	sty	bg_box,x
	stz	bg_box,x

	lda	bg_box+1,x	; Data address low         
	sta	reg0l
	lda	bg_box+2,x	; Data address High       
	sta	reg0h
	lda	bg_box+3,x	; Display address Low  
	sta	reg1l
	lda	bg_box+4,x	; Display address High 
	sta	reg1h
	lda	bg_box+5,x	; Vertical number
	sta	reg2h
	lda	bg_box+6,x	; Horizontal number
	sta	reg2l

	ldy	#$00

	a16

.200
	lda	reg1
	sta	$2116		; VRAM address LOW
	ldx	reg2l		; horizontal number
.400
	lda	(reg0),y	; SCR data    
	sta	$2118

	iny
	iny

	dex
	bne	.400

	lda	reg1
	clc
	adc	#$20
	sta	reg1

	ldx	reg2h
	dex
	stx	reg2h

	bne	.200

	a8

	rts

box_data
	a16

	pla
	inc	a
	sta	reg0
	inc	a
	pha

	a8

	ldy	#07
.100
	lda	(reg0),y
	sta	bg_box,y
	dey
	bne	.100

atr_write
	lda	bg_box		; display on? 1:on  0:off
	cmp	#$02
	beq	_a100
	rts
_a100
	ldy	#0
	sty	bg_box

	lda	bg_box+3	; Display address low   
	sta	reg1l
	lda	bg_box+4	; Display address high 
	sta	reg1h
	lda	bg_box+5	; Vertical number
	sta	reg2h
	lda	bg_box+6	; Horizontal number
	sta	reg2l

	ldy	#$00

	lda	#$80
	sta	$2115
.200
	a16
	lda	reg1
	sta	$2116		; VRAM address LOW
	a8

	ldx	reg2l		; Horizontal number

	lda	bg_box+1	; attribute      
.400
	sta	$2119

	dex
	bne	.400

	a16
	lda	reg1
	clc
	adc	#$20
	sta	reg1
	a8

	ldx	reg2h
	dex
	stx	reg2h

	bne	.200

	lda	#$00
	sta	$2115

	rts

;*****************************************************************
;*                                                               *
;*                  Cursor move routine                          *
;*                                                               *
;*****************************************************************
;================================================================
;		Moving cursor obj 
;================================================================
;   INPUT	X= player number      
;   OUTPUT	cursol_x, cursol_y                 

cursol
	ldx	#$01
	ldy	#$04
cursol10
	lda	mouse_x0,x
	bmi	_x_m		; 

	clc
	adc	cursol_x,x
	bcc	_x_p

	lda	#$ff		; Fixed at the right side
_x_p
	sta	cursol_x,x
	bra	c100
_x_m
	and 	#$7f
	sta	reg0

	lda	cursol_x,x
	sec
	sbc	reg0
	bcs	_x_m10

	lda	#$00		; Fixed at the left side
_x_m10
	sta	cursol_x,x
c100
	lda	mouse_y0,x
	bmi	_y_m

	clc
	adc	cursol_y,x
	cmp	#220
	bcc	_y_p

	lda	#220		; Fixed at the bottom side
_y_p
	sta	cursol_y,x
	sta	obj_ram+1,y
	lda	cursol_x,x
	sta	obj_ram,y

	bra	return

_y_m
	and 	#$7f
	sta	reg0
	lda	cursol_y,x
	sec
	sbc	reg0

	bcs	_y_p10

	lda	#$00		; Fixed at the top side
_y_p10
	sta	cursol_y,x

	sta	obj_ram+1,y
	lda	cursol_x,x
	sta	obj_ram,y

return
	dex
	beq	.10
	rts
.10
	ldy	#$00
	jmp	cursol10

;***************************************************************
;*                                                             *
;*           Mouse speed change routine during game            *
;*                   (take "heart" using right button)         *
;***************************************************************

sokudo

	ldy	#$00
	lda	mouse_swt
	cmp	#$01
	beq	.10

	lda	mouse_swt1
	cmp	#$01
	bne	.50

	ldy	#$04
.10
	lda	obj_ram,y
	cmp	#$28
	bcs	.50

	lda	obj_ram,y
	cmp	#$18
	bcc	.50

	lda	obj_ram+1,y
	cmp	#$18
	bcs	.50

	lda	obj_ram+1,y
	cmp	#$08
	bcc	.50

	tya
	beq	.20
	ldx	#$01		; Change speed for player2
	bra	.30
.20
	ldx	#$00		; Change speed for player1
.30
	lda	mouse_sp0,x	; Add 1 to current speed and save to A reg
	inc	a		; Set A and X before calling speed change
	cmp	#$03
	bne	.40
	lda	#$00
.40
	sta	mouse_sp_set0,x
	jsr	speed_change
.50
	rts

;***************************************************************
;*                                                             *
;*              "Give Up" Routine                              *
;*                   (Take "heart using cursor)                *
;***************************************************************
reset_chk			;Reset using right button

	ldy	#$00
	lda	mouse_swt
	cmp	#$02
	beq	.10

	lda	mouse_swt1
	cmp	#$02
	bne	.100

	ldy	#$04
.10
	lda	obj_ram,y
	cmp	#$28
	bcs	.100

	lda	obj_ram,y
	cmp	#$18
	bcc	.100

	lda	obj_ram+1,y
	cmp	#$18
	bcs	.100

	lda	obj_ram+1,y
	cmp	#$08
	bcc	.100

	ldx	#00
.50
	stz	check1,x
	inx
	cpx	#68
	bne	.50


.100
	rts

;
;///////////////////// end of file //////////////////////////
;